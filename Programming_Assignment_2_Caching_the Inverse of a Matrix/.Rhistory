makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
args(makEvEC)
args(makeVector)
makeVector(1)
test <- makeVector(1)
test.get
test
test$set()
test$getmean()
makeVector(x=numeric(1,2,3))
makeVector$set(1)
test <- makeVector(x=numeric(1,2,3))
test
test$set(1)
test$get()
test$setmean(2)
test$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}\
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(test)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if (!is.null(m)) {
message("getting cached inverse matrix")
return (m)
}
data <- x$get()
x <- solve(x,...)
x$setinverse(m)
}
testmatrix <- matrix(1:9, nrow=3,3)
testmatrix
cacheSolve(testmatrix)
mrteix()
matrix
numeric()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(data, nrow, ncol) {
x <<-  matrix(data,nrow,ncol)
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- slove
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix()
makeCacheMatrix$set(1:9,3,3)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
test <- makeVector()
test
test$get()
test$setmean()
test$setmean(1)
test$getmean()
test
test$set()
test$set(1,2)
test$set(c(1,2))
test$get()
makeCacheMatrix()
test1 <- makeCacheMatrix()
test1
test!$set(1:9,3,3)
test1$set(1:9,3,3)
test1
test1$get()
test1$setinverse()
tset
test
test$get()
test$getmean()
test1$get()
test1$getinverse()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(data, nrow, ncol) {
x <<-  matrix(data,nrow,ncol)
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- slove(x)
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
test1<-makeCacheMatrix()
test1$set(1:9,3,3)
test1$get()
test1$getinverse()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if (!is.null(m)) {
message("getting cached inverse matrix")
return (m)
}
data <- x$get()
x <- solve(x,...)
x$setinverse(m)
}
cacheSolve(test1)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(test)
test1$get()
solve(test1$get())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(data, nrow, ncol) {
x <<-  matrix(data,nrow,ncol)
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve(x)
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix$set(1:9,3,3)
test1$set(1:9,3,3)
test1
test1 <- makeCacheMatrix()
test1
test1$set(1:9,3,3)
test1.get()
test1$get()
test1$setinverse()
solve(test1$get())
test1$set(c(3,1,2,4),2,2)
test1$get()
solve(test1$get())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(data, nrow, ncol) {
x <<-  matrix(data,nrow,ncol)
m <<- NULL
}
get <- function() x
# setinverse <- function(solve) m <<- solve(x)
getinverse <- function() m <<-solve(x)
list(set = set, get = get,
#setinverse = setinverse,
getinverse = getinverse)
}
test1<-makeCacheMatrix()
test1
test1$set(c(3,1,2,4),2,2)
test1$get()
test1$getinverse()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(data, nrow, ncol) {
x <<-  matrix(data,nrow,ncol)
m <<- NULL
}
get <- function() x
# setinverse <- function(solve) m <<- solve(x)
getinverse <- function() m <<-solve(x)
list(set = set, get = get,
#setinverse = setinverse,
getinverse = getinverse)
}
test1<-makeCacheMatrix()
test1
test1$set(c(3,1,2,4),2,2)
test1$getinverse()
test1$getinverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(data, nrow, ncol) {
x <<-  matrix(data,nrow,ncol)
m <<- NULL
}
get <- function() x
# setinverse <- function(solve) m <<- solve(x)
getinverse <- function() m <<-solve(x)
list(set = set, get = get,
#setinverse = setinverse,
getinverse = getinverse)
}
test1<-makeCacheMatrix()
test1$set(c(3,1,2,4),2,2)
test1$get()
test1$setinverse()
source('C:/Users/victo/OneDrive/桌面/R_Programing/Programming_Assignment_2_Lexical Scoping/cachematrix.R')
test <- makeCacheMatrix()
test
test$set(c(3,1,2,4),2,)
test$set(c(3,1,2,4),2,2)
test$get()
test$setinverse()
test$getinverse()
result <-cacheGenericsMetaData(test)
result <-cacheSolve(test)
cacheSolve(test)
test1<-makeCacheMatrix()
test1$set(c(3,1,2,4),2,2)
test$get()
test$getinverse()
test<-makeCacheMatrix()
test$set(c(3,0,0,4),2,2)
test$get()
test$getinverse()
cacheSolve(test)
test$setinverse()
test$getinverse()
cacheSolve(test)
source('C:/Users/victo/OneDrive/桌面/R_Programing/Programming_Assignment_2_Lexical Scoping/cachematrix.R')
source('C:/Users/victo/OneDrive/桌面/R_Programing/Programming_Assignment_2_Lexical Scoping/cachematrix.R')
source('C:/Users/victo/OneDrive/桌面/R_Programing/Programming_Assignment_2_Lexical Scoping/cachematrix.R')
